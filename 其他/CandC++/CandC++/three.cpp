#include <iostream>
#include <cstdio>
#include <string.h>
using namespace std;
//引用和指针

//数组指针  函数指针  常量指针 指针传值 多维指针

//参数引用

//7 ***指针和引用异同
//初始化要求不同：引用创建时必须初始化，指针不需要
//可修改性：引用一旦初始化指向对象，不可改变，指针可以改变
//不存在NULL引用：引用不能指向空，指针可以。
//测试需求：引用不需要测试，指针需要测试。引用效率比指针高
//应用的区别：如果指向不变后用引用，如果存在空和不同对象，则用指针
//实际两者也相似

//8 ***传引用比传指针安全
//指针可以随时指向其他对象，并且可以不初始化，可能会产生野指针
//不存在空引用，指向一个对象就不可以改变，因此引用安全

//9 ***复杂指针的声明  
//指针数组--先数组后指针；数组指针--先指针后数组  使用右左法则圆括号开始 遇到圆括号调转阅读方向
//一个整数 int a
//一个整型指针 int *a
//指向指针的指针，指向的指针是指向一个整型数 int **a
//一个有10个整型数的数组 int a[10]
//一个有10个指针的数组，该指针指向一个整数 int *a[10]
//一个指向有10个整型数组的指针 int (*a)[10]
//一个指向函数的指针，该函数有一个整形参数并返回一个整数 int *a(int)
//一个有10个指针的数组，该指针指向一个函数，函数有一个整型参数返回一个整数 int (*a[10])(int)


//15 指针常量和常量指针
//指针常量--是指针的常量：首先是常量，不可改变地址的指针，内容可以更改；
//常量指针--是常量的指针：首先是指针，指向 内容不可修改

//16 17指针常量和常量指针的区别
//char *const p1--指针常量内容可修改；char const* p2--常量指针内容不可修改
//const char *p3--常量指针内容不可修改；const char*const p4--本身常量，指向内容不可修改

//20 指针数组和数组指针的区别
//int *a[10]--指针数组(首先是数组，才是指针) a里面存放10个int*型变量，在栈区分配空间
//int *b = new int[10]--数组指针 ，指针b指向10个整型数据的一维数组，释放空间使用delete[]

//22 函数指针和指针函数
//指针函数--带指针的函数 本质是函数 int *a(int)  返回指针类型的函数
//函数指针--指向函数的指针 本身首先是指针  int(*a)(int)  指向函数地址的指针

//23  24
//含有10个元素的指针数组 int *a[10]    数组指针int(*a)[10]
//函数指针 int (*a)(int)  指向函数的指针数组 int (*a[10])(int)


//const 指针 const int*a；指向const的指针  int* const a；指向const的const指针 const int* const ptr

//28 野指针
//不是NULL指针，是指向垃圾内存的指针，主要两种：指针变量未初始化，free或者delete之后没有置为NULL

//30 malloc/free和new/delete区别
//前者是标准库，后者是运算符。由于前者是标准库所以不能够吧执行构造函数和析构函数强加于其。而后者自动执行

//37 内存分配方式 
//静态存储区--内存在程序编译的时候就已经分配好了，这块内存在运行期间都是存在的，例如全局变量
//在栈上创建--在执行函数时，函数内部变量的存储单元都可以在栈上创建，函数执行结束后存储单元自动释放。
//从堆上分配，即动态分配，使用malloc/free或者new/delete




int main3(int argc, char* argv[])
{
	//10 用指针赋值
	char a[] = "hello,world";//包括以‘\0’结束字符
	char *ptr = a;//指向数组首地址  从0开始

	printf("%c\n", *(ptr + 4));//ptr+4再输出地址内容
	printf("%c\n", ptr[4]);//和上面一样 与a[4]内容一样
	printf("%c\n", a[4]);
	printf("%c\n", *(a + 4));//与上面a[4]两个一样

	*(ptr + 4) += 1;//相当于a[4]内容加1 第五个字符"o",加1后是'p'
	printf("%s\n", a);


	//11 12指针加减 指针比较
	//11 12指针加减 指针比较
	//11 12指针加减 指针比较
	//11 12指针加减 指针比较
	//11 12指针加减 指针比较
	//11 12指针加减 指针比较
	int b[5] = {1, 2, 3, 4, 5};
	int *ptr1 = (int*)(&b + 1);//指向最后一个位置 以int型加1 a[5]
	//&a+1 取a地址,该地址的值加sizeof(a)的值  即&a + 5 * sizeof(int)
	printf("%d\n",*(b+1));
	printf("%d\n",*(ptr1-1));//a[5] ptr是int*类型 该值指向a[4]

	char str1[] = "abc";//1
	char str2[] = "abc";//2
	const char *str3 = "abc";//3
	const char *str4 = "abc";//4
	//3 4 相同  1 2不同


	system("pause");
	return 0;
}