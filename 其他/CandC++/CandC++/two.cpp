#include <iostream>
#include <cstdio>
using namespace std;

//1 预处理 #ifdef #else #endif

//2 3 4 5 6 宏定义  宏定义只是替换  
#define MAX(x,y) (((x)>(y))?(x):(y))
#define MIN(x,y) (((x)<(y))?(x):(y))
//使用一个#将宏参数变成字符串，使用两个##将宏参数连接起来
#define STR(s) #s
#define CONS(a,b) a##e##b
//宏定义得到一个字的高低位
#define WORD_LO(xxx) ((byte) ((wprd)(xxx)&255))
#define WORD_HI(xxx) ((byte) ((word)(xxx)>>8))
//宏定义得到一个数组所含元素个数
#define ARR_SIZE(a) (sizeof((a))/sizeof((a[0])))

//7 9 const使用方式
//const int x =2 整型常量 值不能改变
//int const x =2 常量整型
//定义常量，修饰函数形参，修饰函数返回值，修饰类成员函数

//8 const和 #define
//前者存在于程序的数据段 并在堆栈分配了空间，后者生命周期存在于编译期

//10 11static作用
//函数体内，模块内函数体外--本地的全局变量，模块内--静态函数只能在本地使用
//static全局变量只初始化一次，防止在其他文件单元中被引用，
//static局部变量只初始化一次，下次依据上一次的结果值
//static函数在内存中只有一份，普通函数在每个被调用中维持一份复制品

//12 13 14 15 16sizeof计算普通变量所占空间大小 类对象占空间(注意字节对齐)
//在win32下，*p和int占4个字节 数组元素个数+1
//当形参为数组时，被当作为传递的是指针，即数值的地址
//对于存在虚函数的情况 :普通函数不占内存，虚函数占一个指针大小的内存。(因为系统构建了一个虚函数表，无论多少虚函数只计算一个虚函数占内存)
//static静态成员变量不在类的实例中，因此不占内存

//17 18 19 20sizeof和strlen的区别
//sizeof是操作符 strlen是函数；计算长度不同，sizeof计算总体大小，strlen计算实际大小，以"\n"结尾
//如果计算指针指向的字符串的长度，则一定使用strlen
//#pragma pack(x)确定对其方式 占用字节情况

//22 23 24 25 26inline函数
//inline函数取代表达式形式的宏定义，消除宏定义当中存在的缺陷。
//inline可以作为某类成员函数，可以使用类的保护乘员和私有成员
//inline是一个真正的函数，编译时编译器会检查其语法等的准确性，消除存在隐患。
//inline是以代码膨胀为代价的，仅省去了函数调用时候的开销，从而提高效率
 
//inline和#define区别
//内联在编译的时候展开 宏在预编译展开
//宏不是函数，内联是函数
//宏定义可能会出现二义性，内联不会出现二义性
//内联函数可以完成类型检测，语句是否正确等编译功能，宏不具有这种功能。



// 4 1 8 8 12 16  8 12 1 1 1 4 4 8


int main2()
{

	system("pause");
	return 0;
}