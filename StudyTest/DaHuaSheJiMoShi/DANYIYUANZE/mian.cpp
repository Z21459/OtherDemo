#include <iostream>
using namespace std;

/*
如果一个类承担职责过多，就等于把职责耦合在一起，一个职责发生变化可能
影响其他职责。会影响整体机制。

软件设计 就是发现职责并把这些职责进行分离
判断是否分离-如果能够想到多余一个动机去改变这个类，这个类就有多余一个的职责，应该分离

*/

/*
开放-封闭原则
是说软件实体-类 模块 函数 等--应该可以扩展 不可以修改

//面对需求 对程序的改动是通过增加新代码进行，而不是更改现有代码

应对程序中呈现频繁变化的那些部分做出抽象
*/

/*
依赖倒转原则:
针对接口编程  不是针对实现编程

里氏代换原则：一个软件如果使用的是父类，那么一定适用于其子类
而且察觉不到父类和子类的区别，在软件中把父类替换成子类不影响

*** 子类必需能够替换掉父类 
*/


int main()
{



	system("pause");
	return 0;
}